[{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Nicholas Judd Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/exampleanalysis.html","id":"part-1","dir":"Articles","previous_headings":"","what":"Part 1","title":"Example Analysis","text":"Questions: question answer data analysis : sugar caffeine content vary based various starbucks drinks menu? sugar content change based milk type? drinks name “skinny” significantly lower amount sugar? questions important assess starbucks certain starbucks drinks healthy options individuals. original data comes official starbucks nutritional dataset tidytuesday dataset 12/21/2021. specifically, nutritional data . using data tidytuesdayR package, installed CRAN using install.packages(“tidytuesdayR”), removed steamed milk original dataset. data dictionary available .","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/exampleanalysis.html","id":"part-2-loading-the-data","dir":"Articles","previous_headings":"","what":"Part 2: Loading the Data","title":"Example Analysis","text":"","code":"create_data_directory <- function() {   data_dir <- \"data\"      if (!dir.exists(data_dir)) {     dir.create(data_dir)   } } create_data_directory() file_path <- \"data/starbucks.csv\" if (!file.exists(file_path)) {   tuesdata <- tidytuesdayR::tt_load('2021-12-21')   starbucks <- tuesdata$starbucks   readr::write_csv(starbucks, file_path) } else {   starbucks <- readr::read_csv(file_path) } #> Rows: 1147 Columns: 15 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (4): product_name, size, trans_fat_g, fiber_g #> dbl (11): milk, whip, serv_size_m_l, calories, total_fat_g, saturated_fat_g,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/exampleanalysis.html","id":"how-are-sugar-and-caffeine-distributed-over-different-drink-types","dir":"Articles","previous_headings":"Part 2: Loading the Data","what":"How are sugar and caffeine distributed over different drink types?","title":"Example Analysis","text":"","code":"ggplot(starbucks, aes(x = sugar_g)) +   geom_histogram(color = \"white\", alpha = 0.4, bins = 30) +   labs(x = \"Sugar (g)\", y = \"Count\",        title = \"Distribution of Sugar Content\",        subtitle = \"sugar content ranges\",        caption = \"Starbucks nutrition data\") +   theme_minimal() ggplot(starbucks, aes(x = caffeine_mg)) +   geom_histogram(color = \"white\", alpha = 0.4, bins = 30) +   labs(x = \"Caffeine (mg)\",         y = \"Count\",        title = \"Distribution of Caffeine Content\",        subtitle = \"caffeien content ranges\",        caption = \"Starbucks nutrition data\") +   theme_minimal() #Sugar is more uniformly distributed, while caffeiene ranges are high"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/exampleanalysis.html","id":"does-sugar-content-change-based-on-milk-type","dir":"Articles","previous_headings":"Part 2: Loading the Data","what":"Does sugar content change based on milk type?","title":"Example Analysis","text":"reveal milk may contributing high sugar content starbucks drinks, factors (syrups, added sugar, etc )","code":"starbucks %>% group_by(milk) %>% summarise(sugar_average = mean(sugar_g)) %>% ggplot(aes(x = milk, y = sugar_average, fill = milk)) +   geom_point() +   geom_line()+   labs(title = \"Average Sugar Content by Milk Type\",        subtitle = \"line graph showing change in sugar based on milk type\",        caption = \"Data is from starbucks nutritional information\",        x = \"Milk Type\",        y = \"Average Sugar Content (g)\") +   theme_minimal() ggplot(starbucks, aes(x = milk, y = sugar_g, fill =  factor(milk))) +     geom_rain(rain.side = 'l')+   labs(title = \"Sugar Content by Milk Type\",        subtitle = \"rain plot showing change in sugar based on milk type\",        caption = \"Data is from starbucks nutritional information\",        x = \"Milk Type\",        y = \"Sugar Content (g)\",        fill = \"Milk Type\") # 0 is no milk, 1 is nonfat, 2 is 2%, 3 is soy, 4 is coconut, and 5 is whole milk # We see that despite using different milk type, the average sugar content for drinks with specific milk types (aside from no milk) are all relatively close to one another. Thus, we can not assume that milk contributes in high sugar content, but need to assess this further by considering other factors or more rigorous testing.  # without taking the average of all drinks with a certain milk, here I am looking at each drink type (average) and individually facetted by milk type to get a better sense of the distribution # We see event with no milk (0), some drinks still have moderate sugar content but more testing would be needed."},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/exampleanalysis.html","id":"do-drinks-named-skinny-have-an-average-lower-sugar-and-calorie-count-compared-to-other-drinks","dir":"Articles","previous_headings":"Part 2: Loading the Data","what":"Do drinks named “skinny” have an average lower sugar and calorie count compared to other drinks?","title":"Example Analysis","text":"","code":"#To use purrr functions (i know there is an easier way) mean_function <- function(data) {   summarise(data, mean_sugar = mean(sugar_g), count = n())   } starbucks %>%   mutate(group = ifelse(grepl(\"skinny\", product_name, ignore.case = TRUE), \"Skinny\", \"Regular\")) %>%   group_split(group) %>%   map_df(~ mean_function(.x) %>% mutate(group = unique(.x$group))) %>%    ggplot(aes(x = group, y = mean_sugar, fill = group)) +   geom_col(position = \"dodge\", width = 0.7, stat = \"identity\") +   geom_errorbar(aes(ymin = mean_sugar - sd(mean_sugar) / sqrt(count),                     ymax = mean_sugar + sd(mean_sugar) / sqrt(count)),                 position = position_dodge(width = 0.7), width = 0.25) +   facet_grid(~ group, scales = \"free\") +   labs(title = \"Sugar Content Comparison: Skinny vs Regular\",        subtitle = \"Plotplot showing the distribution of sugar content\",        x = \"Group\",        y = \"Mean Sugar Content (g)\") #> Warning in geom_col(position = \"dodge\", width = 0.7, stat = \"identity\"): #> Ignoring unknown parameters: `stat` # We see that the skinny drinks clearly have a lower sugar average compared to other drinks. However, it is important to note that there are only 18 skinny while the rest (1129) of the drinks are classified as regular. This definitely plays a role and further analysis of a smaller group of the regular drinks could be assessed."},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/ggrain.html","id":"the-geom_rain-function","dir":"Articles","previous_headings":"","what":"The geom_rain() function","title":"Raincloud vignette","text":"handles many rainclouds wish can overlap group connects within-subject observations longitudinally lines using id.long.var argument colors dots covariate using cov argument handles likert data adding y-jittering likert = TRUE changes orientation + coord_flip() individual elements plots can edited, split aesthetic positioning arguments supplied lists. example boxplots can edited boxplot.args boxplot.args.pos, yet others can also edited substituting name, .e. point/violin/line. supply list defaults overwritten may need re-add . see defaults run ?geom_rain.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/articles/ggrain.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Raincloud vignette","text":"first plot just simply values Sepal.Width iris dataset. function work value want plot must given y argument ggplot. can flip plot + coord_flip() demonstrate .  Let’s see happening 3 Species flowers. fill must factor character vector!  Let’s color dots Species, adding color = Species ggplot. default behavior geom_boxplot color lines boxplot showing median IQR. Therefore, need add boxplot.args list re-color boxplot black. defaults lost therefore must add options show outliers. also possible nudge box plots overlapping boxplot.args.pos. also flip setting rain.side argument left (.e., 'l').  even useful see different species flowers side side rather overlapping. y value must factor character vector!  can flip plots adding coord_flip().  plot bit crammed, lets spread stuff using boxplot.args.pos & violin.args.pos arguments.  Instead coloring dots Species, package offers ability color another variable Sepal.Length. allow us visualize Sepal.Width Sepal.Length relate Species flower. can adding covariate cov argument. current time argument must given string.  now take species versicolor virginica make longitudinal data. going see fertilizer Sepal.Width species! plot species overlapping time point. can see fertilizer caused Sepal Width versicolor species increase virginica species decreased slightly!  can easily flank using rain.side argument 2--2 flanking (.e., 'f2x2'). also automatically uses ggpp::position_dodgenudge dodge boxplots. Yet, descriptive purposes use flanking argument rain.side = 'f' defaults 'f2x2'. rain.side = 'f' argument defaults 2--2 yet throw warning don’t remap violin.args.pos. using flanking groups time points must give specific boxplot.args.pos violin.args.pos element. left elements must negative x-axis nudging values right ones positive x-axis nudging values.  can connect plant lines using id.long.var argument, also use convient rain.side = 'f2x2'. cov argument, must string linking ids observation across time.  can color dots connecting lines Species! also remove lines around violins specifying color = NA, yet now must re-add alpha argument.  can start combine aspects, example three timepoints subjects connected, special flanking covariate mapped!  Lastly, can add mean trend line using stat_summary. Accentuating opposite effects fertilizers two species flowers!  sample code significance test 1--1 flanking raincloud package ggsignif. run don’t want add ggsignif package dependency.","code":"ggplot(iris, aes(1, Sepal.Width)) +   geom_rain() +   theme_classic() +   theme(axis.title.x = element_blank(),          axis.text.x = element_blank(), axis.ticks.x = element_blank()) ggplot(iris, aes(1, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5) +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') ggplot(iris, aes(1, Sepal.Width, fill = Species, color = Species)) +   geom_rain(alpha = .6,             boxplot.args = list(color = \"black\", outlier.shape = NA)) +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') +   scale_color_brewer(palette = 'Dark2') ggplot(iris, aes(1, Sepal.Width, fill = Species, color = Species)) +   geom_rain(alpha = .5, rain.side = 'l',             boxplot.args = list(color = \"black\", outlier.shape = NA),             boxplot.args.pos = list(               position = ggpp::position_dodgenudge(x = .1), width = 0.1             )) +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') +   scale_color_brewer(palette = 'Dark2') +   guides(fill = 'none', color = 'none') ggplot(iris, aes(Species, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5) +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') +   guides(fill = 'none', color = 'none') ggplot(iris, aes(Species, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5) +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') +   guides(fill = 'none', color = 'none') +   coord_flip() ggplot(iris, aes(Species, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5,              boxplot.args.pos = list(               width = 0.05, position = position_nudge(x = 0.13)),             violin.args.pos = list(               side = \"r\",               width = 0.7, position = position_nudge(x = 0.2))) +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') +   guides(fill = 'none', color = 'none') +   coord_flip() ggplot(iris, aes(Species, Sepal.Width, fill = Species)) +   geom_rain(alpha = .6,             cov = \"Sepal.Length\") +   theme_classic() +   scale_fill_brewer(palette = 'Dark2') +   guides(fill = 'none', color = 'none') +   scale_color_viridis_c(option =  \"A\", direction = -1) set.seed(42) # the magic number  iris_subset <- iris[iris$Species %in% c('versicolor', 'virginica'),]  iris.long <- cbind(rbind(iris_subset, iris_subset, iris_subset),                     data.frame(time = c(rep(\"t1\", dim(iris_subset)[1]), rep(\"t2\", dim(iris_subset)[1]), rep(\"t3\", dim(iris_subset)[1])),                               id = c(rep(1:dim(iris_subset)[1]), rep(1:dim(iris_subset)[1]), rep(1:dim(iris_subset)[1]))))  # adding .5 and some noise to the versicolor species in t2 iris.long$Sepal.Width[iris.long$Species == 'versicolor' & iris.long$time == \"t2\"] <- iris.long$Sepal.Width[iris.long$Species == 'versicolor' & iris.long$time == \"t2\"] + .5 + rnorm(length(iris.long$Sepal.Width[iris.long$Species == 'versicolor' & iris.long$time == \"t2\"]), sd = .2) # adding .8 and some noise to the versicolor species in t3 iris.long$Sepal.Width[iris.long$Species == 'versicolor' & iris.long$time == \"t3\"] <- iris.long$Sepal.Width[iris.long$Species == 'versicolor' & iris.long$time == \"t3\"] + .8 + rnorm(length(iris.long$Sepal.Width[iris.long$Species == 'versicolor' & iris.long$time == \"t3\"]), sd = .2)  # now we subtract -.2 and some noise to the virginica species iris.long$Sepal.Width[iris.long$Species == 'virginica' & iris.long$time == \"t2\"] <- iris.long$Sepal.Width[iris.long$Species == 'virginica' & iris.long$time == \"t2\"] - .2 + rnorm(length(iris.long$Sepal.Width[iris.long$Species == 'virginica' & iris.long$time == \"t2\"]), sd = .2)  # now we subtract -.4 and some noise to the virginica species iris.long$Sepal.Width[iris.long$Species == 'virginica' & iris.long$time == \"t3\"] <- iris.long$Sepal.Width[iris.long$Species == 'virginica' & iris.long$time == \"t3\"] - .4 + rnorm(length(iris.long$Sepal.Width[iris.long$Species == 'virginica' & iris.long$time == \"t3\"]), sd = .2)  iris.long$Sepal.Width <- round(iris.long$Sepal.Width, 1) # rounding Sepal.Width so t2 data is on the same resolution iris.long$time <- factor(iris.long$time, levels = c('t1', 't2', 't3')) ggplot(iris.long[iris.long$time %in% c('t1', 't2'),], aes(time, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5) +   theme_classic() +   scale_fill_manual(values=c(\"dodgerblue\", \"darkorange\")) +   guides(fill = 'none', color = 'none') ggplot(iris.long[iris.long$time %in% c('t1', 't2'),], aes(time, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5, rain.side = 'f',              boxplot.args.pos = list(width = .1,                 position = ggpp::position_dodgenudge(                   x = c(-.13, -.13, # pre versicolor, pre virginica                         .13, .13))), # post; post             violin.args.pos = list(width = .7,              position = position_nudge(x = c(rep(-.2, 256*2), rep(-.2, 256*2),# pre; pre                                              rep(.2, 256*2), rep(.2, 256*2))))) + #post; post   theme_classic() +   scale_fill_manual(values=c(\"dodgerblue\", \"darkorange\")) +   guides(fill = 'none', color = 'none') #> Warning: Using the `size` aesthetic with geom_polygon was deprecated in ggplot2 3.4.0. #> ℹ Please use the `linewidth` aesthetic instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. ggplot(iris.long[iris.long$time %in% c('t1', 't2'),], aes(time, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5, rain.side = 'f2x2', id.long.var = \"id\") +   theme_classic() +   scale_fill_manual(values=c(\"dodgerblue\", \"darkorange\")) +   guides(fill = 'none', color = 'none') #> Warning: Duplicated aesthetics after name standardisation: alpha ggplot(iris.long[iris.long$time %in% c('t1', 't2'),], aes(time, Sepal.Width, fill = Species, color = Species)) +   geom_rain(alpha = .5, rain.side = 'f2x2', id.long.var = \"id\",             violin.args = list(color = NA, alpha = .7)) +   theme_classic() +   scale_fill_manual(values=c(\"dodgerblue\", \"darkorange\")) +   scale_color_manual(values=c(\"dodgerblue\", \"darkorange\")) +   guides(fill = 'none', color = 'none') #> Warning: Duplicated aesthetics after name standardisation: alpha ggplot(iris.long, aes(time, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5, rain.side = 'f', id.long.var = \"id\", cov = \"Sepal.Length\",             boxplot.args = list(outlier.shape = NA, alpha = .8),             violin.args = list(alpha = .8, color = NA),             boxplot.args.pos = list(width = .1,              position = ggpp::position_dodgenudge(x = c(-.13, -.13, # t1 old, t1 young                                                         -.13, .13,                                                           .13, .13))),             violin.args.pos = list(width = .7,              position = position_nudge(x = c(rep(-.2, 256*2), rep(-.2, 256*2),# t1                                              rep(-.2, 256*2), rep(.2, 256*2), # t2                                              rep(.2, 256*2), rep(.2, 256*2))))) +   theme_classic() +   scale_fill_manual(values=c(\"dodgerblue\", \"darkorange\")) +   scale_color_viridis_c(option =  \"A\", direction = -1) +   guides(fill = 'none', color = 'none') #> Warning: Duplicated aesthetics after name standardisation: alpha ggplot(iris.long[iris.long$time %in% c('t1', 't2'),], aes(time, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5, rain.side = 'f2x2') +   theme_classic() +   stat_summary(fun = mean, geom = \"line\", aes(group = Species, color = Species)) +   stat_summary(fun = mean, geom = \"point\",                aes(group = Species, color = Species)) +   scale_fill_manual(values=c(\"dodgerblue\", \"darkorange\")) +   scale_color_manual(values=c(\"dodgerblue\", \"darkorange\")) +   guides(fill = 'none', color = 'none') ggplot(iris.long[iris.long$Species == 'versicolor' & iris.long$time %in% c('t1', 't2'),], aes(time, Sepal.Width, fill = Species)) +   geom_rain(alpha = .5, rain.side = 'f1x1') +  ggsignif::geom_signif(   comparisons = list(c(\"t1\", \"t2\")),   map_signif_level = TRUE) + scale_fill_manual(values=c(\"darkorange\", \"darkorange\")) + theme_classic()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Judd. Author, maintainer. Jordy van Langen. Author. Micah Allen. Contributor. Rogier Kievit. Author.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Allen M, Poggiali D, Whitaker K, Marshall TR, van Langen J, Kievit RA (2021). “Raincloud plots: multi-platform tool robust data visualization [version 2; peer review: 2 approved].” Wellcome Open Research, 4(63). doi:10.12688/wellcomeopenres.15191.2.","code":"@Article{,   title = {Raincloud plots: a multi-platform tool for robust data visualization [version 2; peer review: 2 approved]},   author = {Micah Allen and Davide Poggiali and Kirstie Whitaker and Tom Rhys Marshall and Jordy {van Langen} and Rogier A. Kievit},   year = {2021},   journal = {Wellcome Open Research},   volume = {4},   number = {63},   doi = {10.12688/wellcomeopenres.15191.2}, }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"part-1d","dir":"","previous_headings":"","what":"Part 1D:","title":"A Rainclouds Geom for ggplot2 ","text":"link original R package came . link repository 5 things customized pkgdown website: bootswatch: sandstone - customization made theme sandstone warmer neutral colors different buttons navigations website bg: “#F5F5F5” - light grey shade website background fg: “#333333” - dark grey main text primary: “#007BFF” - blue color main buttons packages/functions base_font: {google: “Roboto”} - customized text font Roboto retrived google fonts code-bg: “#FFFFFF” - code blocks background color white (descrubing functions text code blocks) theme: solarized-light - overall theme color palette set Original author package: Listed citations Example Analysis Author: Nora Elhaissouni Exported functions examples :","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"ggrain---raincloud-plots","dir":"","previous_headings":"","what":"A Rainclouds Geom for ggplot2 ","title":"A Rainclouds Geom for ggplot2 ","text":"ggrain R-package allows create Raincloud plots - following ‘Grammar Graphics’ (.e., ggplot2) - : Highly customizable Connect longitudinal observations Handles Likert data Allows mapping covariate.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Rainclouds Geom for ggplot2 ","text":"","code":"ggplot(iris, aes(x = 1, y = Sepal.Length)) +   geom_rain()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Rainclouds Geom for ggplot2 ","text":"two ways install package. Download CRAN version Download GitHub","code":"install.packages(\"ggrain\")  library(ggrain) if (!require(remotes)) {     install.packages(\"remotes\") } remotes::install_github('njudd/ggrain')  library(ggrain)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"simple-examples","dir":"","previous_headings":"","what":"Simple examples","title":"A Rainclouds Geom for ggplot2 ","text":"Raincloud per group Different groups overlapped","code":"ggplot(iris, aes(x = Species, y = Sepal.Length, fill =  Species)) +         geom_rain(rain.side = 'l') ggplot(iris, aes(x = 1, y = Sepal.Length, fill = Species)) +         geom_rain(alpha = .5)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"A Rainclouds Geom for ggplot2 ","text":"complete overview ggrain 2--2 raincloud plot multiple repeated measures, please see Vignette.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"ggrain-specific-features","dir":"","previous_headings":"","what":"ggrain specific features","title":"A Rainclouds Geom for ggplot2 ","text":"geom_rain combination 4 different ggplot2 geom’s (.e., point, line, boxplot & violin). id.long.var: grouping variable connect lines cov: covariate remap color points Likert: True False response adds y jittering rain.side: side display rainclouds: ‘l’ left, ‘r’ right ‘f’ flanking Specific geom arguments can passed list 4 geom’s argument {point/line/boxplot/violin}.args. list arguments can passed see help files respective geom’s (e.g., ?gghalves::geom_half_violin). Position-related arguments (e.g., jittering, nudging & width) can passed {point/line/boxplot/violin}.args.pos, see help file ?geom_rain defaults","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"contributions--issues","dir":"","previous_headings":"","what":"Contributions / Issues","title":"A Rainclouds Geom for ggplot2 ","text":"warmly welcome contributions. can open issue make pull request like add something new!","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A Rainclouds Geom for ggplot2 ","text":"ggrain developed Nicholas Judd, Jordy van Langen, Micah Allen, Rogier Kievit.","code":"- Judd, N., van Langen, J., Allen, M., & Kievit, R.A.     ggrain: A Rainclouds Geom for 'ggplot2'.     R package version 0.0.3.     CRAN 2023,     https://CRAN.R-project.org/package=ggrain"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"A Rainclouds Geom for ggplot2 ","text":"2021, NWO (Dutch research council) announced inaugural NWO Open Science Fund. Open Science Fund aims support researchers develop, test implement innovative ways making research open, accessible, transparent reusable, covering whole range Open Science. Raincloud plots team awarded fantastic initiative specifically working : Creating ggrain R-package Creating interactive R Shiny application raincloudplots Integrating Raincloudplots JASP Statistics Organzing globally accessible, online workshops help people create raincloudplots improve data visualizations general. can read awarded project : https://www.nwo.nl/en/projects/203001011 can watch online webinar hosted NWO project:","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"raincloud-plots","dir":"","previous_headings":"","what":"Raincloud Plots","title":"A Rainclouds Geom for ggplot2 ","text":"now 4 ways can use Raincloud Plots tools: - series specific easy modify scripts https://github.com/RainCloudPlots/RainCloudPlots - initial raincloudplots package - newest R-package ggrain - R Shiny application: raincloudplots","code":"- Allen, M., Poggiali, D., Whitaker, K., Marshall, T. R., van Langen, J., & Kievit, R. A.     Raincloud plots: a multi-platform tool for robust data visualization [version 2; peer review: 2 approved]      Wellcome Open Research 2021, 4:63. https://doi.org/10.12688/wellcomeopenres.15191.2"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"ggrain---raincloud-plots-1","dir":"","previous_headings":"","what":"ggrain - Raincloud Plots","title":"A Rainclouds Geom for ggplot2 ","text":"ggrain R-package allows create Raincloud plots - following ‘Grammar Graphics’ (.e., ggplot2) - : Highly customizable Connect longitudinal observations Handles Likert data Allows mapping covariate.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"example-1","dir":"","previous_headings":"","what":"Example","title":"A Rainclouds Geom for ggplot2 ","text":"","code":"ggplot(iris, aes(x = 1, y = Sepal.Length)) +   geom_rain()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"installation-1","dir":"","previous_headings":"","what":"Installation","title":"A Rainclouds Geom for ggplot2 ","text":"two ways install package. Download CRAN version Download GitHub","code":"install.packages(\"ggrain\")  library(ggrain) if (!require(remotes)) {     install.packages(\"remotes\") } remotes::install_github('njudd/ggrain')  library(ggrain)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"simple-examples-1","dir":"","previous_headings":"","what":"Simple examples","title":"A Rainclouds Geom for ggplot2 ","text":"Raincloud per group Different groups overlapped","code":"ggplot(iris, aes(x = Species, y = Sepal.Length, fill =  Species)) +         geom_rain(rain.side = 'l') ggplot(iris, aes(x = 1, y = Sepal.Length, fill = Species)) +         geom_rain(alpha = .5)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"vignette-1","dir":"","previous_headings":"","what":"Vignette","title":"A Rainclouds Geom for ggplot2 ","text":"complete overview ggrain 2--2 raincloud plot multiple repeated measures, please see Vignette.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"ggrain-specific-features-1","dir":"","previous_headings":"","what":"ggrain specific features","title":"A Rainclouds Geom for ggplot2 ","text":"geom_rain combination 4 different ggplot2 geom’s (.e., point, line, boxplot & violin). id.long.var: grouping variable connect lines cov: covariate remap color points Likert: True False response adds y jittering rain.side: side display rainclouds: ‘l’ left, ‘r’ right ‘f’ flanking Specific geom arguments can passed list 4 geom’s argument {point/line/boxplot/violin}.args. list arguments can passed see help files respective geom’s (e.g., ?gghalves::geom_half_violin). Position-related arguments (e.g., jittering, nudging & width) can passed {point/line/boxplot/violin}.args.pos, see help file ?geom_rain defaults","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"contributions--issues-1","dir":"","previous_headings":"","what":"Contributions / Issues","title":"A Rainclouds Geom for ggplot2 ","text":"warmly welcome contributions. can open issue make pull request like add something new!","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"citation-1","dir":"","previous_headings":"","what":"Citation","title":"A Rainclouds Geom for ggplot2 ","text":"ggrain developed Nicholas Judd, Jordy van Langen, Micah Allen, Rogier Kievit.","code":"- Judd, N., van Langen, J., Allen, M., & Kievit, R.A.     ggrain: A Rainclouds Geom for 'ggplot2'.     R package version 0.0.3.     CRAN 2023,     https://CRAN.R-project.org/package=ggrain"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"funding-1","dir":"","previous_headings":"","what":"Funding","title":"A Rainclouds Geom for ggplot2 ","text":"2021, NWO (Dutch research council) announced inaugural NWO Open Science Fund. Open Science Fund aims support researchers develop, test implement innovative ways making research open, accessible, transparent reusable, covering whole range Open Science. Raincloud plots team awarded fantastic initiative specifically working : Creating ggrain R-package Creating interactive R Shiny application raincloudplots Integrating Raincloudplots JASP Statistics Organzing globally accessible, online workshops help people create raincloudplots improve data visualizations general. can read awarded project : https://www.nwo.nl/en/projects/203001011 can watch online webinar hosted NWO project:","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/index.html","id":"raincloud-plots-1","dir":"","previous_headings":"","what":"Raincloud Plots","title":"A Rainclouds Geom for ggplot2 ","text":"now 4 ways can use Raincloud Plots tools: - series specific easy modify scripts https://github.com/RainCloudPlots/RainCloudPlots - initial raincloudplots package - newest R-package ggrain - R Shiny application: raincloudplots","code":"- Allen, M., Poggiali, D., Whitaker, K., Marshall, T. R., van Langen, J., & Kievit, R. A.     Raincloud plots: a multi-platform tool for robust data visualization [version 2; peer review: 2 approved]      Wellcome Open Research 2021, 4:63. https://doi.org/10.12688/wellcomeopenres.15191.2"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_paired_raincloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Paired raincloud plot — geom_paired_raincloud","title":"Paired raincloud plot — geom_paired_raincloud","text":"Taking https://raw.githubusercontent.com/yjunechoe/geom_paired_raincloud/master/geom_paired_raincloud.R 30-10-22 attribution https://yjunechoe.github.io/","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_paired_raincloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paired raincloud plot — geom_paired_raincloud","text":"","code":"geom_paired_raincloud(   mapping = NULL,   data = NULL,   stat = \"ydensity\",   position = \"dodge\",   trim = TRUE,   scale = \"area\",   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_paired_raincloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paired raincloud plot — geom_paired_raincloud","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. trim TRUE (default), trim tails violins range data. FALSE, trim tails. scale \"area\" (default), violins area (trimming tails). \"count\", areas scaled proportionally number observations. \"width\", violins maximum width. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_paired_raincloud.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paired raincloud plot — geom_paired_raincloud","text":"Create paired raincloud plot (useful visualizing difference experimental conditions tested subjects items). Adopted geom_violinhalf() source code see package","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_paired_raincloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paired raincloud plot — geom_paired_raincloud","text":"","code":"library(ggplot2)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Raincloud Plots — geom_rain","title":"Raincloud Plots — geom_rain","text":"function displays individual data points, boxplot half violin plot. also option connect data points lines across groups specifying id connect . Lastly, desired one can color dots based another variable.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raincloud Plots — geom_rain","text":"","code":"geom_rain(   mapping = NULL,   data = NULL,   inherit.aes = TRUE,   id.long.var = NULL,   cov = NULL,   rain.side = NULL,   likert = FALSE,   seed = 42,   ...,   point.args = rlang::list2(...),   point.args.pos = rlang::list2(position = position_jitter(width = 0.04, height = 0, seed     = seed)),   line.args = rlang::list2(alpha = 0.2, ...),   line.args.pos = rlang::list2(position = position_jitter(width = 0.04, height = 0, seed     = seed), ),   boxplot.args = rlang::list2(outlier.shape = NA, ...),   boxplot.args.pos = rlang::list2(width = 0.05, position = position_nudge(x = 0.1), ),   violin.args = rlang::list2(...),   violin.args.pos = rlang::list2(side = \"r\", width = 0.7, position = position_nudge(x =     0.15), ) )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_rain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raincloud Plots — geom_rain","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). id.long.var group connect lines - must string (e.g., \"id\"). cov covariate color dots - must string (e.g., \"cov\") rain.side want rainclouds displayed, right (\"r\"), left (\"l\") flanking (\"f\"), 1--1 flanking raincloud use (\"f1x1\") 2--2 use (\"f2x2\"). likert Currently developing, right now just addes y-jitter. seed jittering point & line match. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. point.args list args dots point.args.pos list positional args points line.args list args lines, need specify group connect id.long.var line.args.pos list positional args lines boxplot.args list args boxplot boxplot.args.pos list positional args boxplot violin.args list args violin violin.args.pos list positional args violin","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_rain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raincloud Plots — geom_rain","text":"Returns list three environments used 'ggplot()' function 'ggplot2' package. id.long.var argument used output list 4 environments. 4 environments similar structure 'geom_boxplot()', 'geom_violin()', 'geom_point()' 'geom_line()' 'ggplot2'. need library(rlang) need library(ggplot2) depends = ggplot2","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_rain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Raincloud Plots — geom_rain","text":"Allen, M., Poggiali, D., Whitaker, K., Marshall, T. R., van Langen, J., & Kievit, R. . Raincloud plots: multi-platform tool robust data visualization Wellcome Open Research 2021, 4:63. https://doi.org/10.12688/wellcomeopenres.15191.2","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/geom_rain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raincloud Plots — geom_rain","text":"","code":"e1 <- ggplot(iris, aes(Species, Sepal.Width, fill = Species)) e1 + geom_rain()   # x must be the discrete variable # orinetation can be changed with coord_flip() e1 + geom_rain(alpha = .5) + coord_flip()   # we can color the dots by a covariate e1 + geom_rain(cov = \"Sepal.Length\")   # we can edit elements individually e1 + geom_rain(violin.args = list(alpha = .3, color = NA))   # we can flip them e1 + geom_rain(rain.side = 'l')  # and move them e1 + geom_rain(boxplot.args.pos = list(width = .1, position = position_nudge(x = -.2)))   # they also work longitudinally e2 <- ggplot(sleep, aes(group, extra, fill = group)) e2 + geom_rain(id.long.var = \"ID\")   # we can add groups sleep_dat <- cbind(sleep, data.frame(sex = c(rep(\"male\", 5), rep(\"female\", 5), rep(\"male\", 5), rep(\"female\", 5)))) e3 <- ggplot(sleep_dat, aes(group, extra, fill = sex)) e3 + geom_rain(alpha = .6)   # add likert example e4 <- ggplot(mpg, aes(1, hwy, fill = manufacturer)) e4 + geom_rain(likert= TRUE) #> Likert = T; setting y axis jittering for point & line to .1   # lets make it look nicer e4 + geom_rain(likert= TRUE,  boxplot.args.pos = list(position = ggpp::position_dodgenudge(x = .095), width = .1),  violin.args = list(color = NA, alpha = .5)) #> Likert = T; setting y axis jittering for point & line to .1"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/ggplot2-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"Points — ggname","title":"Points — ggname","text":"point geom used create scatterplots. scatterplot useful displaying relationship two continuous variables. can used compare one continuous one categorical variable, two categorical variables, variation like geom_jitter(), geom_count(), geom_bin2d() usually appropriate. bubblechart scatterplot third variable mapped size points.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/ggplot2-ggproto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Points — ggname","text":"na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/ggplot2-ggproto.html","id":"overplotting","dir":"Reference","previous_headings":"","what":"Overplotting","title":"Points — ggname","text":"biggest potential problem scatterplot overplotting: whenever points, points may plotted top one another. can severely distort visual appearance plot. one solution problem, techniques can help. can add additional information geom_smooth(), geom_quantile() geom_density_2d(). unique x values, geom_boxplot() may also useful. Alternatively, can summarise number points location display way, using geom_count(), geom_hex(), geom_density2d(). Another technique make points transparent (e.g. geom_point(alpha = 0.05)) small (e.g. geom_point(shape = \".\")).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/reference/ggplot2-ggproto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Points — ggname","text":"","code":"p <- ggplot(mtcars, aes(wt, mpg)) p + geom_point()   # Add aesthetic mappings p + geom_point(aes(colour = factor(cyl)))  p + geom_point(aes(shape = factor(cyl)))  # A \"bubblechart\": p + geom_point(aes(size = qsec))   # Set aesthetics to fixed value ggplot(mtcars, aes(wt, mpg)) + geom_point(colour = \"red\", size = 3)   # \\donttest{ # Varying alpha is useful for large datasets d <- ggplot(diamonds, aes(carat, price)) d + geom_point(alpha = 1/10)  d + geom_point(alpha = 1/20)  d + geom_point(alpha = 1/100)  # }  # For shapes that have a border (like 21), you can colour the inside and # outside separately. Use the stroke aesthetic to modify the width of the # border ggplot(mtcars, aes(wt, mpg)) +   geom_point(shape = 21, colour = \"black\", fill = \"white\", size = 5, stroke = 5)   # \\donttest{ # You can create interesting shapes by layering multiple points of # different sizes p <- ggplot(mtcars, aes(mpg, wt, shape = factor(cyl))) p +   geom_point(aes(colour = factor(cyl)), size = 4) +   geom_point(colour = \"grey90\", size = 1.5)  p +   geom_point(colour = \"black\", size = 4.5) +   geom_point(colour = \"pink\", size = 4) +   geom_point(aes(shape = factor(cyl)))   # geom_point warns when missing values have been dropped from the data set # and not plotted, you can turn this off by setting na.rm = TRUE set.seed(1) mtcars2 <- transform(mtcars, mpg = ifelse(runif(32) < 0.2, NA, mpg)) ggplot(mtcars2, aes(wt, mpg)) +   geom_point() #> Warning: Removed 4 rows containing missing values (`geom_point()`).  ggplot(mtcars2, aes(wt, mpg)) +   geom_point(na.rm = TRUE)  # }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/news/index.html","id":"ggrain-003","dir":"Changelog","previous_headings":"","what":"ggrain 0.0.3","title":"ggrain 0.0.3","text":"CRAN release: 2023-03-03 changed dependencies ggplot 3.4.0 greater added global seed arguement","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/news/index.html","id":"ggrain-002","dir":"Changelog","previous_headings":"","what":"ggrain 0.0.2","title":"ggrain 0.0.2","text":"CRAN release: 2023-02-15 Fixed incorrected desc geom_rain() added Micah contributor","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nora-elhaissouni/news/index.html","id":"ggrain-001","dir":"Changelog","previous_headings":"","what":"ggrain 0.0.1","title":"ggrain 0.0.1","text":"CRAN release: 2023-02-14 First complete implementation ready initial release","code":""}]
